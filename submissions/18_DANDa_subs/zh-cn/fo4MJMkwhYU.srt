1
00:00:00,260 --> 00:00:02,410
我们终于可以进行数据再加工了

2
00:00:02,410 --> 00:00:07,310
我们来看一下在 Python 中如何解析 CSV 文件

3
00:00:07,310 --> 00:00:09,620
在这里 我们要将 CSV 数据读入我们的程序

4
00:00:09,620 --> 00:00:13,140
并为文件中的每一项创建一个字典

5
00:00:13,140 --> 00:00:15,940
你可能会问 我们为什么要这样做？

6
00:00:15,940 --> 00:00:19,370
为什么不直接用电子表格应用打开文件？

7
00:00:19,370 --> 00:00:22,360
其中一个原因是如果文件过大 比如有几十兆 甚至几百兆

8
00:00:22,360 --> 00:00:25,550
在 Excel 等电子表格应用中打开

9
00:00:25,550 --> 00:00:28,860
速度会非常慢 效率也很低 有时甚至是无法打开打开文件的

10
00:00:28,860 --> 00:00:31,850
其实 你的应用程序所完成任务和用Excel打开文件是一样的

11
00:00:31,850 --> 00:00:35,710
我们以编程方式来处理表格数据的另一个原因是

12
00:00:35,710 --> 00:00:37,650
我们需要处理的文件可能有很多

13
00:00:37,650 --> 00:00:40,340
所以 我们根本不可能

14
00:00:40,340 --> 00:00:43,900
在电子表格应用中一个一个的手动处理

15
00:00:43,900 --> 00:00:46,770
让我们看一下这里的代码

16
00:00:46,770 --> 00:00:50,570
可以看到 我们这里有个解析文件的应用程序

17
00:00:50,570 --> 00:00:52,360
在这个练习中

18
00:00:52,360 --> 00:00:55,720
我们仍然使用披头士的唱片数据

19
00:00:55,720 --> 00:00:58,700
你将修改已给代码中的 parse filde 函数

20
00:00:58,700 --> 00:01:02,280
利用 Python 的 split 函数

21
00:01:02,280 --> 00:01:06,910
将每一行解析成字典

22
00:01:06,910 --> 00:01:10,520
在每一个字典中 字段名是关键字

23
00:01:10,520 --> 00:01:16,200
每一行的值是这些关键字的值

24
00:01:16,200 --> 00:01:19,710
你需要生成一个包含多个字典的列表

25
00:01:19,710 --> 00:01:23,090
记住 每一项都要有相应的字典

26
00:01:23,090 --> 00:01:26,310
然后 你需要在 parse file 函数中返回这个列表

27
00:01:26,310 --> 00:01:30,400
最后一点要说明的是 不要处理整个文件

28
00:01:30,400 --> 00:01:33,100
你应该只解析文件的前十行

29
00:01:33,100 --> 00:01:35,740
如果你的解析对象超出数据集的前十行

30
00:01:35,740 --> 00:01:39,010
你就会遇到麻烦

31
00:01:39,010 --> 00:01:41,880
由于这是我们本门课的第一个练习

32
00:01:41,880 --> 00:01:43,850
我来讲一下这里的 test 函数

33
00:01:43,850 --> 00:01:47,240
我们为你提供了test 函数

34
00:01:47,240 --> 00:01:51,170
以方便测试你写的解析文件代码是否正确

35
00:01:51,170 --> 00:01:53,420
这个代码会调用 parse file 函数

36
00:01:53,420 --> 00:01:56,730
并从解析文件中抽取结果样本

37
00:01:56,730 --> 00:01:59,020
检查其是否与预期值相符合

38
00:01:59,020 --> 00:02:02,540
当你提交你的代码时

39
00:02:02,540 --> 00:02:05,661
我们可能会在不同的数据集上运行一些其它测试代码
