1
00:00:00,140 --> 00:00:02,540
在使用网络服务时

2
00:00:02,540 --> 00:00:05,090
我们常常会遇到 JSON 数据

3
00:00:05,090 --> 00:00:09,190
网络服务本质上是指你可以利用 HTTP 请求进行访问的数据库

4
00:00:09,190 --> 00:00:12,230
在网络服务中 你可以通过 URL 发出查询指令

5
00:00:12,230 --> 00:00:14,465
在这里 我要用 musicbrainz.org 网站作为例子

6
00:00:14,465 --> 00:00:17,660
这个网站的优点是不需要 API 秘钥

7
00:00:17,660 --> 00:00:21,040
因此你可以轻松地实验

8
00:00:21,040 --> 00:00:25,130
我即将提供给你的代码

9
00:00:25,130 --> 00:00:27,790
MusicBrainz 实际上是一种百科

10
00:00:27,790 --> 00:00:31,400
它提供一种可以用来访问其数据的网络服务

11
00:00:31,400 --> 00:00:33,690
MusicBrainz 储存的数据类型是与音乐有关的元数据

12
00:00:33,690 --> 00:00:37,090
我们可以查询关于

13
00:00:37,090 --> 00:00:41,050
艺术家、唱片公司和录音等方面的数据

14
00:00:41,050 --> 00:00:44,330
我们查询这个网站的方法是

15
00:00:44,330 --> 00:00:47,780
以 musicbrainz.org 为基础构造 URL

16
00:00:47,780 --> 00:00:50,550
然后指定一个实体 也就是我们想要获取的数据类型

17
00:00:50,550 --> 00:00:54,220
我们还可以指定一些其它的参数

18
00:00:54,220 --> 00:00:58,420
使我们能够精确获取一个特定实体 例如一个艺术家的

19
00:00:58,420 --> 00:01:01,120
特征或元数据

20
00:01:01,120 --> 00:01:04,519
现在 为了使用这个网站

21
00:01:04,519 --> 00:01:07,020
我们还需要做一件事情

22
00:01:07,020 --> 00:01:09,480
如果我们想要获取一位艺术家的特定信息

23
00:01:09,480 --> 00:01:12,390
我们需要知道它的唯一标识符 也就是 MusicBrainz 中的唯一标识符

24
00:01:12,390 --> 00:01:15,570
在这节课中

25
00:01:15,570 --> 00:01:18,260
唯一标识符的问题

26
00:01:18,260 --> 00:01:21,150
会以不同的方式多次出现

27
00:01:21,150 --> 00:01:23,290
所以 我们首先要做的 是利用它的搜索接口

28
00:01:23,290 --> 00:01:26,340
输入查询指令

29
00:01:26,340 --> 00:01:29,960
也就是搜索我们想获取信息的艺术家

30
00:01:29,960 --> 00:01:33,200
我们要对查询所得的结果进行处理

31
00:01:33,200 --> 00:01:36,650
以获取这个艺术家的标识符

32
00:01:36,650 --> 00:01:40,690
然后 我们可以利用这个标识符 获得该艺术家的相关信息

33
00:01:40,690 --> 00:01:42,720
别以为我是一成不变的

34
00:01:42,720 --> 00:01:45,580
接下来我们要查询另一个艺术家 Lucero 的数据

35
00:01:45,580 --> 00:01:49,740
我们进行第一个查询

36
00:01:49,740 --> 00:01:51,580
然后 我们就能返回一个结果集

37
00:01:51,580 --> 00:01:54,600
接下来 我们要处理这个结果

38
00:01:54,600 --> 00:02:01,010
以获得 Lucero 在 MusicBrainz 中的标识符

39
00:02:01,010 --> 00:02:02,840
我不会过于详细地讲这个问题

40
00:02:02,840 --> 00:02:05,990
但我想指出的是

41
00:02:05,990 --> 00:02:11,330
在发出查询指令之后 我们获得的结果是 JSON 数据

42
00:02:11,330 --> 00:02:14,770
我们利用 Python 中的 JSON 模块读取数据

43
00:02:14,770 --> 00:02:17,690
它就会被直接转换成合适的 Python 对象

44
00:02:17,690 --> 00:02:22,250
JSON 对象就相当于 Python 中的字典

45
00:02:22,250 --> 00:02:25,730
因此 我们在这里获取的

46
00:02:25,730 --> 00:02:28,850
就是这个 Python字典

47
00:02:28,850 --> 00:02:31,320
我们要访问这个字典中的艺术家字段

48
00:02:31,320 --> 00:02:33,810
这个字段的值恰好是个数组

49
00:02:33,810 --> 00:02:38,230
我还知道

50
00:02:38,230 --> 00:02:40,760
我感兴趣的是来自孟菲斯的 Lucero 乐队

51
00:02:40,760 --> 00:02:44,360
是这个数组的第二个对象

52
00:02:44,360 --> 00:02:47,620
我们需要得到这个艺术家的标识符

53
00:02:47,620 --> 00:02:51,260
艺术家的值是另一个对象

54
00:02:51,260 --> 00:02:53,350
它是个 JSON 对象 而我们从 MusicBrainz 获得的结果

55
00:02:53,350 --> 00:02:56,460
由于我们使用的是 Python

56
00:02:56,460 --> 00:03:00,930
JSON 模块就把它转换成了另一个 Python 字典

57
00:03:00,930 --> 00:03:03,290
因此 标识符字段含有我们感兴趣的信息

58
00:03:03,290 --> 00:03:06,440
而后我们需要再次查询这个网站

59
00:03:06,440 --> 00:03:09,720
这一次

60
00:03:09,720 --> 00:03:13,880
向网站明确请求该标识符的相关信息

61
00:03:13,880 --> 00:03:16,080
该标识符来自于我们第一次的查询

62
00:03:16,080 --> 00:03:19,362
应该说 是来自于第一次查询处理后的结果

63
00:03:19,362 --> 00:03:21,720
然后 我们要进行第二次查询

64
00:03:21,720 --> 00:03:23,700
这次我们要查询发行信息

65
00:03:23,700 --> 00:03:26,400
你可以看下这里的代码实现什么功能

66
00:03:26,400 --> 00:03:30,260
我添加了一些方便使用的代码

67
00:03:30,260 --> 00:03:33,600
使我们可以轻松地输入 MusicBrainz 所需要的参数

68
00:03:33,600 --> 00:03:37,440
从而获取发行数据

69
00:03:37,440 --> 00:03:40,300
接下来要做的就是输出结果

70
00:03:40,300 --> 00:03:43,730
我们来看一下结果是什么

71
00:03:43,730 --> 00:03:46,810
这是我们第一次查询感兴趣的艺术家

72
00:03:46,810 --> 00:03:49,790
所获得的结果集

73
00:03:49,790 --> 00:03:53,330
好 这就是我们想要的标识符 接着

74
00:03:53,330 --> 00:03:55,680
我还要指出几点

75
00:03:55,680 --> 00:03:58,050
我把这个代码设置成 每次向这个网络服务发出查询请求时

76
00:03:58,050 --> 00:04:02,790
它都会打印出 URL

77
00:04:02,790 --> 00:04:06,770
记住 我们是通过 URL 向网络服务发出特定查询命令的

78
00:04:06,770 --> 00:04:09,210
在 musicbrainz.org 中 我指定要访问这个网络服务的第二个版本

79
00:04:09,210 --> 00:04:12,053
至少 我觉得这里的2就是这个意思

80
00:04:12,053 --> 00:04:15,740
然后我想说 我感兴趣的实体是艺术家

81
00:04:15,740 --> 00:04:17,750
这是该艺术家的标识符

82
00:04:17,750 --> 00:04:20,600
现在 我希望你完成返回 JSON 格式的数据

83
00:04:20,600 --> 00:04:26,000
而我们就是通过这个 MusicBrainz 参数

84
00:04:26,000 --> 00:04:29,610
来指定我们想要获取的元数据

85
00:04:29,610 --> 00:04:31,160
元数据可以包含所有内容

86
00:04:31,160 --> 00:04:33,840
如果想要多种类型的元数据 我们只需将它们连接在一起

87
00:04:33,840 --> 00:04:37,120
在这里 我只想知道发行信息

88
00:04:37,120 --> 00:04:39,330
所以在代码中

89
00:04:39,330 --> 00:04:42,260
我要处理这次查询所得到的结果

90
00:04:42,260 --> 00:04:45,990
并提取出第一次的发行数据

91
00:04:45,990 --> 00:04:49,260
这个对象在 Python 中就是字典

92
00:04:49,260 --> 00:04:52,720
它代表或储存第一次发行的数据

93
00:04:52,720 --> 00:04:57,240
这次发行的标题为

94
00:04:57,240 --> 00:04:59,840
2012年4月20日 纽约瓦布斯特音乐厅

95
00:04:59,840 --> 00:05:02,170
事实上 我去了这场演出 我妻子给我了一个惊喜

96
00:05:02,170 --> 00:05:04,020
让我的最好的朋友 一个 Lucero 乐迷飞过来一起看演出

97
00:05:04,020 --> 00:05:08,850
在这里我做的是

98
00:05:08,850 --> 00:05:13,070
利用列表解析处理所有的发布信息

99
00:05:13,070 --> 00:05:16,960
并提取出每一次发布的标题

100
00:05:16,960 --> 00:05:20,200
然后 我直接把它们都打印出来

101
00:05:20,200 --> 00:05:22,950
我希望你能浏览一下整个代码

102
00:05:22,950 --> 00:05:24,680
了解它的作用

103
00:05:24,680 --> 00:05:27,940
然后自己尝试着利用它进行一些查询

104
00:05:27,940 --> 00:05:30,570
你可以查找不同的艺术家

105
00:05:30,570 --> 00:05:33,550
你可以利用我们在这里提供的一些代码

106
00:05:33,550 --> 00:05:37,000
来查询某一艺术家不同类型的元数据

107
00:05:37,000 --> 00:05:39,980
尝试使用这部分代码

108
00:05:39,980 --> 00:05:42,640
或在 Python 解释程序中使用 Python

109
00:05:42,640 --> 00:05:44,990
大概了解一下这里的数据

110
00:05:44,990 --> 00:05:49,100
我希望你能输出完整的结果集

111
00:05:49,100 --> 00:05:53,180
详细了解返回的数据类型

112
00:05:53,180 --> 00:05:58,090
它们都是对象或数组中嵌套了其它对象或数组的层级数据结构

113
00:05:58,090 --> 00:06:01,150
在此之后 我们要进行一个小测试

114
00:06:01,150 --> 00:06:04,020
让你们回答一些具体问题

115
00:06:04,020 --> 00:06:07,180
因此 你必须能正确地查询这个网络服务
