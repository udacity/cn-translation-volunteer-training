1
00:00:00,320 --> 00:00:04,300
所以 我要返回我的代码 在这里 我要尝试创建
我要回到我的代码 此处 我将尝试创建

2
00:00:04,300 --> 00:00:09,000
类 Movie 的一个实例 就像类 Turtle 中那样 我
Movie 类的实例 就像我们之前操作 Turtle 类那样

3
00:00:09,000 --> 00:00:14,340
将先创建了一个新的 Python 文件 然后将它与之前的 Python 文件
我先创建新的 Python 文件 然后将它与之前的Python文件

4
00:00:14,340 --> 00:00:17,890
保存在同一个文件夹中 然后
保存在同一文件夹 然后

5
00:00:17,890 --> 00:00:23,290
我要称这个新文件为 entertainment_center.py 那么
我将它命名为 entertainment_center.py

6
00:00:25,720 --> 00:00:27,890
这是我目前为止创建的两个
这是我目前为止创建的两个

7
00:00:27,890 --> 00:00:30,370
Python 文件 这是第一个 我在这里开始
Python 文件 这是第一个 在此

8
00:00:30,370 --> 00:00:33,740
定义了类 Movie 它的名称为 media.py 然后这里
我定义了 Movie 类 命名为 media.py 然后这是

9
00:00:33,740 --> 00:00:37,810
是新文件 名为 entertainment_center.py 这个
新文件 名为 entertainment_center.py

10
00:00:37,810 --> 00:00:42,280
新文件在这里 我将说 import media 请注意
在新文件中 我会输入 import media 请注意

11
00:00:42,280 --> 00:00:44,480
这是我的媒体文件 我是在这里
这是我的 media 文件 我在这里

12
00:00:44,480 --> 00:00:47,350
开始定义类 Movie 的 因此 我通过
定义 Movie 类 因此 我通过这段代码告诉

13
00:00:47,350 --> 00:00:51,480
这行代码告诉我的程序 我想使用
我通过这段代码告诉我的程序

14
00:00:51,480 --> 00:00:56,535
位于这里的之前 Python 文件中的内容 然后我将继续说
我想用先前 Python 文件中的内容 然后我继续输入

15
00:00:56,535 --> 00:01:02,680
toy_story = media.Movie 你会注意到
toy_story = media.Movie 你会注意到

16
00:01:02,680 --> 00:01:05,590
media 是我之前的
media 是我之前的

17
00:01:05,590 --> 00:01:08,220
Python 文件的名称 而 Movie 是该文件中
Python 文件名称 而 Movie 是该文件中

18
00:01:08,220 --> 00:01:10,730
定义的类的名称 我在此快速
定义的类的名称 我在此快速

19
00:01:10,730 --> 00:01:16,510
提醒一下 我本不必创建新文件的 事实上 我可以
提醒一下 我其实不需要创建新文件 事实上 我可以在

20
00:01:16,510 --> 00:01:18,680
就在这里在我之前的文件中
在先前文件的此处

21
00:01:18,680 --> 00:01:21,850
编写整条代码 但是更好的做法是
编写整条代码 但更好的做法是

22
00:01:21,850 --> 00:01:24,840
将类定义保存在一个文件中 然后
将类定义保存在一个单独的文件中

23
00:01:24,840 --> 00:01:28,020
从另一个文件中调用或使用你的类
然后从另一个文件调用或使用

24
00:01:28,020 --> 00:01:30,760
好的 我们继续 这里我有一点
好的 我们继续 这里我想强调

25
00:01:30,760 --> 00:01:34,330
要强调一下 那就是这行代码
这行代码与

26
00:01:34,330 --> 00:01:37,700
和我们之前创建 turtle
与我们先前创建 Turtle brad

27
00:01:37,700 --> 00:01:42,010
brad 的方式非常相似 在两种情形中 我都用了“模块
的方式非常相似 两种情况中 我都使用了

28
00:01:42,010 --> 00:01:45,490
或文件.类名”的格式 接下来我们
“模块或文件.类名”的格式 接下来我们

29
00:01:45,490 --> 00:01:48,270
要做的是看看运行这行代码时
弄清楚运行

30
00:01:48,270 --> 00:01:51,330
到底会发生什么 一个办法
这段代码会发生什么

31
00:01:51,330 --> 00:01:53,560
是回忆一下当我们创建 turtle brad 时
其中一种方式是回忆我们创建 Turtle brad 时

32
00:01:53,560 --> 00:01:57,290
后台发生的事情 现在
后台发生的事情

33
00:01:57,290 --> 00:02:00,495
我们一起探究一下 你们还记得我们运行下面这行代码时
现在我们一块探究一下 你还记得运行下面这行代码时

34
00:02:00,495 --> 00:02:03,360
发生了什么吗？这里提供了一些答案
发生了什么吗？ 这里提供了一些答案选项：

35
00:02:03,360 --> 00:02:07,410
选项 一个名为 init 的函数被调用了；它为新实例 brad 在
调用了函数 init 它为新实例 brad

36
00:02:07,410 --> 00:02:11,020
内存中初始化或创建了空间 或
在内存中初始化或创建了空间;

37
00:02:11,020 --> 00:02:15,720
一个名为 D-E-L（或 del）的函数删除了实例 brad
或 调用函数 D-E-L (或 del) 删除了实例 brad;

38
00:02:15,720 --> 00:02:20,134
一个名为 cmp（或 compare）的函数被调用 它将实例
调用了函数 C-M-P (或 compare) 它将

39
00:02:20,134 --> 00:02:23,910
brad 比作 angie；我不知道哪个是正确答案 告诉我们你的想法
实例 brad 与 angie 做比较; 或 我不知道 告诉我你的想法
