1
00:00:00,260 --> 00:00:03,220
非常感谢你能在论坛上分享你的回答 现在

2
00:00:03,220 --> 00:00:05,970
在写所有的代码时 我们已经看到了许多

3
00:00:05,970 --> 00:00:09,380
新词 让我们复习一下 那么 在这里我

4
00:00:09,380 --> 00:00:11,860
在屏幕上同时看到两个程序

5
00:00:11,860 --> 00:00:15,060
文件 在我的第一个程序文件中我创建

6
00:00:15,060 --> 00:00:18,660
类 movie 接着第二个 当我定义那个类的

7
00:00:18,660 --> 00:00:23,130
实例时 例如像玩具总动员和阿凡达这样的实例 现在 你

8
00:00:23,130 --> 00:00:25,450
可能需要打开全屏模式以便于

9
00:00:25,450 --> 00:00:28,080
读屏幕上所有的细节信息

10
00:00:28,080 --> 00:00:30,950
好的 让我们开始复习所有遇到的新词

11
00:00:30,950 --> 00:00:33,980
所以 我们开始定义一个类 

12
00:00:33,980 --> 00:00:37,560
class 关键字使我们创建类 你可以认为

13
00:00:37,560 --> 00:00:40,160
类是一种蓝图 并且类

14
00:00:40,160 --> 00:00:44,420
可以同时有数据和方法 现在 我们可以

15
00:00:44,420 --> 00:00:47,630
创建多个类的实例 在这个例子中

16
00:00:47,630 --> 00:00:50,920
我们创建比如玩具总动员和阿凡达之类的实例 我们能

17
00:00:50,920 --> 00:00:53,830
创建更多 现在 当我们创建

18
00:00:53,830 --> 00:00:56,159
一个类的实例 如玩具

19
00:00:56,159 --> 00:01:00,030
总动员 类构造函数被调用 这个是

20
00:01:00,030 --> 00:01:02,960
类中基本的 init 函数 它

21
00:01:02,960 --> 00:01:05,300
是我们初始化所有与实例有关

22
00:01:05,300 --> 00:01:09,500
的数据的地方 构造函数用关键字

23
00:01:09,500 --> 00:01:12,430
self  现在 你可以认为 self 是

24
00:01:12,430 --> 00:01:16,144
自身或者被牵涉的实例 那么 当

25
00:01:16,144 --> 00:01:19,904
实例玩具总动员被创建时 self 是

26
00:01:19,904 --> 00:01:23,460
玩具总动员 所有与一个具体实例有关的变量

27
00:01:23,460 --> 00:01:27,420
被叫做实例变量 现在 这些变量对于

28
00:01:27,420 --> 00:01:29,860
一个对象来说是独特 并且他们可被类中的 self

29
00:01:29,860 --> 00:01:32,430
关键字及类之外的实例名称

30
00:01:32,430 --> 00:01:36,100
所访问 另外 最后 类中所有与

31
00:01:36,100 --> 00:01:38,760
实例有关的函数

32
00:01:38,760 --> 00:01:41,200
及有self作为第一个参数 

33
00:01:41,200 --> 00:01:45,810
被称为实例方法 那么到此你应该理解了

34
00:01:45,810 --> 00:01:48,860
屏幕上是目前我们所学到的所有的新词 
