1
00:00:00,450 --> 00:00:02,860
那么让我们回到代码 在

2
00:00:02,860 --> 00:00:05,620
这里我看见我的类 movie 然后在里面

3
00:00:05,620 --> 00:00:08,990
我会开始定义 这个函数 init 

4
00:00:08,990 --> 00:00:12,290
现在 我们会发现这个函数有一个奇怪的地方

5
00:00:12,290 --> 00:00:14,750
就是 在单词 init 的两边都有

6
00:00:14,750 --> 00:00:17,740
双下划线 这些下划线是 Python 

7
00:00:17,740 --> 00:00:21,750
的一种方式告诉我们 嘿 程序员们

8
00:00:21,750 --> 00:00:25,520
这个名称 init 是在 Python 的基本中保留的 而且

9
00:00:25,520 --> 00:00:28,210
这是一个特殊的函数或者方法 究竟init 

10
00:00:28,210 --> 00:00:31,690
有什么特殊的呢？ 是这样 它初始化或在内存中

11
00:00:31,690 --> 00:00:35,460
创建空间 来记住像是标题 故事情节 之类

12
00:00:35,460 --> 00:00:37,630
这样的细节 对于我们将要创建的

13
00:00:37,630 --> 00:00:40,530
新的电影实例 现在 init 接收一些

14
00:00:40,530 --> 00:00:43,990
信息或者参数 其一

15
00:00:43,990 --> 00:00:47,780
会是 python 关键字 self  现在你会问  

16
00:00:47,780 --> 00:00:50,620
这个调用的 self 是什么呢？ 好吧 你可以

17
00:00:50,620 --> 00:00:54,600
把 self 视为是它自己 或者被创建的实例本身

18
00:00:54,600 --> 00:00:57,230
所以 当我们在其他 Python 文件运行

19
00:00:57,230 --> 00:01:00,110
这行代码 在这里多提一句作为提醒 

20
00:01:00,110 --> 00:01:02,900
我们想要创建一个新的电影叫 玩具总动员

21
00:01:02,900 --> 00:01:04,590
然后当我们运行这行代码时 我们知道

22
00:01:04,590 --> 00:01:08,400
在类 Movie 中函数 __init__ 被调用 Self

23
00:01:08,400 --> 00:01:12,410
在这个实例中指向的就是 “玩具总动员” 现在我要向

24
00:01:12,410 --> 00:01:15,830
大家坦白一件事 我记得多年前我上大学时我那时

25
00:01:15,830 --> 00:01:19,360
第一次学到面向对象编程 我也不太能理解

26
00:01:19,360 --> 00:01:22,980
这个 self 的概念 如果

27
00:01:22,980 --> 00:01:25,090
你也是这样 现在别太

28
00:01:25,090 --> 00:01:28,060
担心 随着我们之后的编程学习

29
00:01:28,060 --> 00:01:30,990
这些会逐渐变得更清晰明了

30
00:01:30,990 --> 00:01:34,260
总之 让我们先把这个关键字 self 加到我们的

31
00:01:34,260 --> 00:01:36,880
新词列表中 好的 我将回到

32
00:01:36,880 --> 00:01:39,830
类 movie 并接着定义函数 init 

33
00:01:40,910 --> 00:01:46,070
现在 我们想 init 来初始化如标题 故事情节和

34
00:01:46,070 --> 00:01:51,027
其他一些我们想在类中记得的信息 我们可采用的方法是 我

35
00:01:51,027 --> 00:01:55,674
会调用 self.title 接着用 self.storyline

36
00:01:55,674 --> 00:02:00,504
再下来用 poster_image_url 

37
00:02:00,504 --> 00:02:05,940
最后用 trailer_youtube_url 现在 我们必须初始化

38
00:02:05,940 --> 00:02:08,979
这些变量 与 init 函数接收的信息

39
00:02:08,979 --> 00:02:11,760
具体来说 它将接收

40
00:02:11,760 --> 00:02:14,590
四条信息 第一条是 

41
00:02:14,590 --> 00:02:18,360
电影标题 第二是 电影故事情节

42
00:02:18,360 --> 00:02:21,060
第三条 电影的海报 

43
00:02:21,060 --> 00:02:24,970
最后一条是 电影在 Youtube 上的预告 所以 注意看 一旦我

44
00:02:24,970 --> 00:02:27,820
接收到这四条信息并作为参数给

45
00:02:27,820 --> 00:02:31,550
__init__ 函数 我们便可以初始化 Movie 变量

46
00:02:31,550 --> 00:02:34,330
我给你们演示下方法 self.title 是电影

47
00:02:34,330 --> 00:02:38,612
标题 Self.storyline 是电影故事情节 接着是

48
00:02:38,612 --> 00:02:41,994
海报图 最后再来是

49
00:02:41,994 --> 00:02:44,910
youtube 上的预告 坦白说

50
00:02:44,910 --> 00:02:47,580
现在我们已经写了很多

51
00:02:47,580 --> 00:02:51,210
看上去新奇的代码 我想说

52
00:02:51,210 --> 00:02:52,570
我们现在要做的就是

53
00:02:52,570 --> 00:02:55,020
先休息一下 深呼吸

54
00:02:57,590 --> 00:02:59,448
现在 我建议你 

55
00:02:59,448 --> 00:03:02,010
暂停这个视频 在你的电脑上先行写下

56
00:03:02,010 --> 00:03:05,400
这几行代码 一旦我们在电脑上运行

57
00:03:05,400 --> 00:03:08,840
这些代码 它们都会变得有意义 现在 有一个关键点

58
00:03:08,840 --> 00:03:11,470
我要请大家特别注意 在我执行这个

59
00:03:11,470 --> 00:03:14,090
代码前  如果我打开

60
00:03:14,090 --> 00:03:18,400
名为entertainment_center.py 的另一个Python 文件 运行这个代码的话

61
00:03:18,400 --> 00:03:22,320
会提示错误 这个错误发生是由于

62
00:03:22,320 --> 00:03:25,030
当我们尝试创建电影 玩具

63
00:03:25,030 --> 00:03:28,180
总动员时 init 函数被调用 尽管我们

64
00:03:28,180 --> 00:03:31,730
未发送任何信息 inti也会

65
00:03:31,730 --> 00:03:35,210
开始寻找多个参数或者信息 因此

66
00:03:35,210 --> 00:03:37,940
在这里我们改动一下 既然我们知道

67
00:03:37,940 --> 00:03:41,080
edit 函数的参数是 self 它默认

68
00:03:41,080 --> 00:03:43,410
被 Python 添加 所以我直接跳过

69
00:03:43,410 --> 00:03:47,450
它 下一个是电影标题 我知道的是

70
00:03:47,450 --> 00:03:52,530
玩具总动员 那么我添加一下它 接着 是电影

71
00:03:52,530 --> 00:03:57,540
故事情节 我也将它会输入进去 这是 一个

72
00:03:57,540 --> 00:04:02,350
男孩和他的具有生命意识的玩具的

73
00:04:02,350 --> 00:04:07,700
故事 接下来是 要加一张形象图 

74
00:04:07,700 --> 00:04:12,970
我之前已经在维基百科上找到一张 玩具总动员的海报

75
00:04:12,970 --> 00:04:18,970
的链接 最后我加上了电影的 Youtube 预告 都加好了

76
00:04:21,050 --> 00:04:23,450
好了 现在 让我滚动几行

77
00:04:23,450 --> 00:04:24,990
回到代码初始的

78
00:04:24,990 --> 00:04:28,240
位置 在这里 我发现你们不能看到全部的

79
00:04:28,240 --> 00:04:30,690
代码 我要做的是将代码截图

80
00:04:30,690 --> 00:04:32,910
把图片放在

81
00:04:32,910 --> 00:04:35,760
导师笔记中以方便你们查看 好的

82
00:04:35,760 --> 00:04:37,870
最后 我要

83
00:04:37,870 --> 00:04:42,490
输入玩具总动员的故事情节 让我保存这个文件

84
00:04:44,890 --> 00:04:50,740
接着回到我的类 Movie 的文件 同样保存它 然后

85
00:04:50,740 --> 00:04:55,850
再回到 entertainment_center.py 文件 现在

86
00:04:55,850 --> 00:04:58,430
这里 如果一切顺利的话 我的程序应该

87
00:04:58,430 --> 00:05:03,220
输出 toy_story.storyline 试着运行一下 你们

88
00:05:03,220 --> 00:05:06,300
看 玩具总动员 故事情节在屏幕上输出了

89
00:05:06,300 --> 00:05:07,600
好的 那么 在下一个视频中 我们

90
00:05:07,600 --> 00:05:09,970
将看看当我们运行这个代码时

91
00:05:09,970 --> 00:05:11,020
后台究竟发生了什么
